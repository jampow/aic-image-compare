{"version":3,"sources":["Image/Switcher.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","_templateObject","Status","span","_templateObject2","Switcher","props","percs","imgNumber","_useState","useState","_useState2","Object","slicedToArray","idx","setIndex","next","length","prev","getPerc","react_default","a","createElement","onWheel","e","deltaY","alt","src","concat","ImgsMenu","ul","App_templateObject","App","imgs","pic","setPic","map","n","key","onClick","selectPicture","Image_Switcher","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gjBAGA,IAkCMA,EAAYC,IAAOC,IAAVC,KAITC,EAASH,IAAOI,KAAVC,KAcGC,EApDE,SAAAC,GAAS,IAChBC,EAAqBD,EAArBC,MAAOC,EAAcF,EAAdE,UADSC,EAEAC,mBAAS,GAFTC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEjBK,EAFiBH,EAAA,GAEZI,EAFYJ,EAAA,GASlBK,EAAO,WACPF,EAAM,IAAMP,EAAMU,QACtBF,EAASD,EAAM,IAGXI,EAAO,WACC,IAARJ,GACJC,EAASD,EAAM,IAGXK,EAAU,kBAAMZ,EAAMO,IAI5B,OACEM,EAAAC,EAAAC,cAACxB,EAAD,CAAWyB,QApBQ,SAAAC,GACPA,EAAEC,OACR,EAAIT,IAASE,MAmBjBE,EAAAC,EAAAC,cAACpB,EAAD,KAASiB,KACTC,EAAAC,EAAAC,cAAA,OACEI,IAAI,cACJC,IAPc,cAAAC,OAAoBpB,EAApB,KAAAoB,OAAiCT,IAAjC,sQCOtB,IAAMU,EAAW9B,IAAO+B,GAAVC,KAcCC,EAvCf,WACE,IACMC,EAAO,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAFvDxB,EAISC,mBAASuB,EAAK,IAJvBtB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAINyB,EAJMvB,EAAA,GAIDwB,EAJCxB,EAAA,GAUb,OACES,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACO,EAAD,KACGI,EAAKG,IAAI,SAAAC,GAAC,OACTjB,EAAAC,EAAAC,cAAA,MAAIgB,IAAKD,EAAGE,QAAS,kBARP,SAAAF,GACpBF,EAAOE,GAO0BG,CAAcH,KACtCA,EACAA,IAAMH,GAAO,SAIpBd,EAAAC,EAAAC,cAACmB,EAAD,CAAUlC,MAnBA,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAmBXC,UAAW0B,MCdrBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1e8fd7f2.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nconst Switcher = props => {\n  const { percs, imgNumber } = props\n  const [idx, setIndex] = useState(0)\n\n  const wheelHandler = e => {\n    const dir = e.deltaY\n    dir > 0 ? next() : prev()\n  }\n\n  const next = () => {\n    if (idx + 1 === percs.length) return\n    setIndex(idx + 1)\n  }\n\n  const prev = () => {\n    if (idx === 0) return\n    setIndex(idx - 1)\n  }\n\n  const getPerc = () => percs[idx]\n\n  const getFilename = () => `/images/img${imgNumber}-${getPerc()}.jpg`\n\n  return (\n    <Container onWheel={wheelHandler}>\n      <Status>{getPerc()}</Status>\n      <img\n        alt='comparativo'\n        src={getFilename()}\n      />\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  position: relative;\n`\n\nconst Status = styled.span`\n  background-color: rgba(0,0,0, 0.5);\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding: 10px;\n  font-size: 16px;\n  color: #fff;\n\n  :after {\n    content: '%';\n  }\n`\n\nexport default Switcher\n","import React, { useState } from 'react';\nimport Switcher from './Image/Switcher.js'\nimport styled from 'styled-components'\n\n//const percs = [15, 25, 35]\n\nfunction App() {\n  const percs = [35, 45, 55, 65, 75, 85, 95]\n  const imgs = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\"]\n\n  const [pic, setPic] = useState(imgs[0])\n\n  const selectPicture = n => {\n    setPic(n)\n  }\n\n  return (\n    <div>\n      <ImgsMenu>      \n        {imgs.map(n => (\n          <li key={n} onClick={() => selectPicture(n)}>\n            {n}\n            {n === pic && ' <'}\n          </li>\n        ))}\n      </ImgsMenu>      \n      <Switcher percs={percs} imgNumber={pic} />\n    </div>\n  );\n}\n\nconst ImgsMenu = styled.ul`\n  background-color: rgba(0, 0, 0, 0.5);\n  position: absolute;\n  color: #fff;\n  top: 50px;\n  left: 0;\n  z-index: 1;\n  padding: 4px 0;\n\n  li {\n    padding: 4px 10px;\n  }\n`\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}